package main

// +build ignore

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const tpl = `// Code generated by go generate. DO NOT EDIT.
// sources:
{{ range $idx, $path := .Sources }}// {{ $path }}
{{ end }}
package sources // import "happydns.org/sources"

var Icons = map[string][]byte{
{{ range $file, $content := .Map }}  {{printf "%q" $file}}: []byte({{printf "%q" $content}}),
{{ end }}}
`

var bundleTpl = template.Must(template.New("").Parse(tpl))

type valTpl struct {
	Sources []string
	Map     map[string][]byte
}

func main() {
	srcFiles, err := filepath.Glob("sources/*/*.png")
	if err != nil {
		panic(err)
	}

	d := valTpl{
		Sources: []string{},
		Map:     map[string][]byte{},
	}

	for _, srcFile := range srcFiles {
		data, err := ioutil.ReadFile(srcFile)
		if err != nil {
			panic(err)
		}

		d.Sources = append(d.Sources, srcFile)
		d.Map["git.happydns.org/happydns/"+strings.TrimSuffix(srcFile, ".png")] = data
	}

	f, err := os.Create("sources/icons.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	bundleTpl.Execute(f, d)
}
